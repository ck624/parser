// $ANTLR 2.7.7 (2006-11-01): "sysvlog.g" -> "SysVlogParser.java"$

package parser.sv;
import  parser.Message;

public interface SysVlogTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SEMI = 4;
	int LITERAL_library = 5;
	int COMMA = 6;
	// "-incdir" = 7
	int STRING = 8;
	int LT_ = 9;
	int SLASH = 10;
	int GT = 11;
	int LITERAL_include = 12;
	int LITERAL_config = 13;
	int LITERAL_endconfig = 14;
	int COLON = 15;
	int LITERAL_design = 16;
	int DOT = 17;
	int LITERAL_default = 18;
	int LITERAL_instance = 19;
	int LITERAL_cell = 20;
	int LITERAL_liblist = 21;
	int LITERAL_use = 22;
	int LITERAL_package = 23;
	int LITERAL_primitive = 24;
	int LITERAL_endmodule = 25;
	int LPAREN = 26;
	int DOT_STAR = 27;
	int RPAREN = 28;
	int LITERAL_extern = 29;
	int LITERAL_module = 30;
	int LITERAL_macromodule = 31;
	int LITERAL_interface = 32;
	int LITERAL_endinterface = 33;
	int LITERAL_program = 34;
	int LITERAL_endprogram = 35;
	int LITERAL_virtual = 36;
	int LITERAL_class = 37;
	int LITERAL_extends = 38;
	int LITERAL_endclass = 39;
	int LITERAL_endpackage = 40;
	int LITERAL_timeunit = 41;
	int LITERAL_timeprecision = 42;
	int POUND = 43;
	int LITERAL_type = 44;
	int LITERAL_input = 45;
	int LITERAL_output = 46;
	int LITERAL_inout = 47;
	int LITERAL_ref = 48;
	int EQ = 49;
	int LITERAL_clocking = 50;
	int LITERAL_defparam = 51;
	int LITERAL_bind = 52;
	int LITERAL_forkjoin = 53;
	int LITERAL_const = 54;
	int LITERAL_function = 55;
	int LITERAL_new = 56;
	int LITERAL_static = 57;
	int LITERAL_protected = 58;
	int LITERAL_local = 59;
	int LITERAL_rand = 60;
	int LITERAL_randc = 61;
	int LITERAL_super = 62;
	int LITERAL_endfunction = 63;
	int LITERAL_constraint = 64;
	int LCURLY = 65;
	int RCURLY = 66;
	int LITERAL_solve = 67;
	int LITERAL_before = 68;
	int MINUS_GT = 69;
	int LITERAL_if = 70;
	int RAPREN = 71;
	int LITERAL_else = 72;
	int LITERAL_foreach = 73;
	int LBRACK = 74;
	int RBRACK = 75;
	int COLON_EQ = 76;
	int COLON_SLASH = 77;
	int LITERAL_localparam = 78;
	int LITERAL_parameter = 79;
	int LITERAL_specparam = 80;
	int LITERAL_import = 81;
	int COLON2 = 82;
	int STAR = 83;
	int LITERAL_genvar = 84;
	int LITERAL_vectored = 85;
	int LITERAL_scalared = 86;
	int LITERAL_typedef = 87;
	int LITERAL_enum = 88;
	int LITERAL_struct = 89;
	int LITERAL_union = 90;
	int LITERAL_automatic = 91;
	int LITERAL_packed = 92;
	int LITERAL_string = 93;
	int LITERAL_chandle = 94;
	int LITERAL_event = 95;
	int LITERAL_byte = 96;
	int LITERAL_shortint = 97;
	int LITERAL_int = 98;
	int LITERAL_longint = 99;
	int LITERAL_integer = 100;
	int LITERAL_time = 101;
	int LITERAL_bit = 102;
	int LITERAL_logic = 103;
	int LITERAL_reg = 104;
	int LITERAL_shortreal = 105;
	int LITERAL_real = 106;
	int LITERAL_realtime = 107;
	// "supply0" = 108
	// "supply1" = 109
	int LITERAL_tri = 110;
	int LITERAL_triand = 111;
	int LITERAL_trior = 112;
	// "tri0" = 113
	// "tri1" = 114
	int LITERAL_wire = 115;
	int LITERAL_wand = 116;
	int LITERAL_wor = 117;
	int LITERAL_trireg = 118;
	int LITERAL_signed = 119;
	int LITERAL_unsigned = 120;
	int LITERAL_void = 121;
	int LITERAL_tagged = 122;
	// "highz1" = 123
	// "highz0" = 124
	// "strong0" = 125
	// "pull0" = 126
	// "weak0" = 127
	// "strong1" = 128
	// "pull1" = 129
	// "weak1" = 130
	int LITERAL_small = 131;
	int LITERAL_medium = 132;
	int LITERAL_large = 133;
	int DOLLAR = 134;
	// "\"DPI\"" = 135
	int LITERAL_export = 136;
	int LITERAL_task = 137;
	int LITERAL_context = 138;
	int LITERAL_pure = 139;
	int LITERAL_endtask = 140;
	int PLUS = 141;
	int PLUS2 = 142;
	int MINUS = 143;
	int MINUS2 = 144;
	int STAR2 = 145;
	int PERCENT = 146;
	int EQ2 = 147;
	int NOT_EQ = 148;
	int LT_EQ = 149;
	int GT_EQ = 150;
	int LITERAL_modport = 151;
	int LITERAL_assert = 152;
	int LITERAL_property = 153;
	int LITERAL_assume = 154;
	int LITERAL_cover = 155;
	int LITERAL_expect = 156;
	int LITERAL_endproperty = 157;
	int LITERAL_disable = 158;
	int LITERAL_iff = 159;
	int BAR_MINUS_GT = 160;
	int BAR_EQ_GT = 161;
	int LITERAL_not = 162;
	int LITERAL_or = 163;
	int LITERAL_and = 164;
	int LITERAL_sequence = 165;
	int LITERAL_endsequence = 166;
	int LITERAL_throughout = 167;
	int LITERAL_first_match = 168;
	int LITERAL_intersect = 169;
	int LITERAL_within = 170;
	int POUND2 = 171;
	int LITERAL_dist = 172;
	int LITERAL_covergroup = 173;
	int LITERAL_endgroup = 174;
	int LITERAL_option = 175;
	int LITERAL_type_option = 176;
	int AT2 = 177;
	int LITERAL_begin = 178;
	int LITERAL_end = 179;
	int LITERAL_coverpoint = 180;
	int LITERAL_wildcard = 181;
	int LITERAL_bins = 182;
	int LITERAL_illegal_bins = 183;
	int LITERAL_ignore_bins = 184;
	int EQ_GT = 185;
	int LITERAL_cross = 186;
	int NOT = 187;
	int AND2 = 188;
	int OR2 = 189;
	int LITERAL_binsof = 190;
	int LITERAL_cmos = 191;
	int LITERAL_rcmos = 192;
	// "bufif0" = 193
	// "bufif1" = 194
	// "notif0" = 195
	// "notif1" = 196
	int LITERAL_nmos = 197;
	int LITERAL_pmos = 198;
	int LITERAL_rnmos = 199;
	int LITERAL_rpmos = 200;
	int LITERAL_nand = 201;
	int LITERAL_nor = 202;
	int LITERAL_xor = 203;
	int LITERAL_xnor = 204;
	int LITERAL_buf = 205;
	// "tranif0" = 206
	// "tranif1" = 207
	// "rtranif0" = 208
	// "rtranif1" = 209
	int LITERAL_tran = 210;
	int LITERAL_rtran = 211;
	int LITERAL_generate = 212;
	int LITERAL_endgenerate = 213;
	int LITERAL_case = 214;
	int LITERAL_endcase = 215;
	int LITERAL_for = 216;
	int LITERAL_endprimitive = 217;
	int LITERAL_assign = 218;
	int LITERAL_alias = 219;
	int LITERAL_final = 220;
	int LITERAL_initial = 221;
	int LITERAL_always = 222;
	int LITERAL_always_comb = 223;
	int LITERAL_always_latch = 224;
	int LITERAL_always_ff = 225;
	int PLUS_EQ = 226;
	int MINUS_EQ = 227;
	int STAR_EQ = 228;
	int SLASH_EQ = 229;
	int PERCENT_EQ = 230;
	int AND_EQ = 231;
	int OR_EQ = 232;
	int CARET_EQ = 233;
	int LT2_EQ = 234;
	int GT2_EQ = 235;
	int LT3_EQ = 236;
	int GT3_EQ = 237;
	int LITERAL_fork = 238;
	int LITERAL_join = 239;
	int LITERAL_join_any = 240;
	int LITERAL_join_none = 241;
	int LITERAL_repeat = 242;
	int AT = 243;
	int AT_STAR = 244;
	int LITERAL_posedge = 245;
	int LITERAL_negedge = 246;
	int LITERAL_return = 247;
	int LITERAL_break = 248;
	int LITERAL_continue = 249;
	int LITERAL_wait = 250;
	int LITERAL_wait_order = 251;
	int LITERAL_unique = 252;
	int LITERAL_priority = 253;
	int LITERAL_matches = 254;
	int LITERAL_casez = 255;
	int LITERAL_casex = 256;
	int LITERAL_randcase = 257;
	int LITERAL_forever = 258;
	int LITERAL_while = 259;
	int LITERAL_do = 260;
	int TIC = 261;
	int LITERAL_endclocking = 262;
	int GT2 = 263;
	int LT2 = 264;
	int LITERAL_with = 265;
	int PLUS_COLON = 266;
	int MINUS_COLON = 267;
	int LITERAL_randomize = 268;
	int LITERAL_null = 269;
	int QMARK = 270;
	int SIMPLE_IDENTIFIER = 271;
	int LITERAL_this = 272;
	int BACK_TIC = 273;
	int TILDE = 274;
	int AND = 275;
	int TILDE_AND = 276;
	int OR = 277;
	int TILDE_OR = 278;
	int CARET = 279;
	int TILDE_CARET = 280;
	int EQ3 = 281;
	int NOT_EQ2 = 282;
	int EQ_QMARK_EQ = 283;
	int NOT_QMARK_EQ = 284;
	int GT3 = 285;
	int LT3 = 286;
	int UNBASED_UNSIZED_LITERAL = 287;
	int NUMBER = 288;
	int ESCAPED_IDENTIFIER = 289;
	// "$root" = 290
	// "$unit" = 291
	int SYSTEM_TF_IDENTIFIER = 292;
	int COLON_TOKENS = 293;
	int TIC_DIRECTIVE = 294;
	int TIC_LINE = 295;
	int RAW_IDENTIFIER = 296;
	int VOCAB = 297;
	int SIZED_NUMBER = 298;
	int SIZE = 299;
	int BASE = 300;
	int UNSIZED_LITERAL = 301;
	int BASE_OR_TIC_OR_NUMBER = 302;
	int SIZED_DIGIT = 303;
	int UNSIZED_NUMBER = 304;
	int DIGIT = 305;
	int HEXDIGIT = 306;
	int EXPONENT = 307;
	int WS_ = 308;
	int NEWLINE = 309;
	int SL_COMMENT = 310;
	int ML_COMMENT = 311;
}
